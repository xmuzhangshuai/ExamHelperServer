/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.yrw.web.actions;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Map;

import javax.persistence.criteria.CriteriaBuilder.In;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.yrw.config.DefaultValue;
import com.yrw.domains.Questiontype;
import com.yrw.domains.Section;
import com.yrw.domains.Singlechoice;
import com.yrw.domains.Subject;
import com.yrw.service.QuestionService;
import com.yrw.service.SectionService;
import com.yrw.service.SubjectService;
import com.yrw.web.forms.SingleChoiceForm;

/**
 * MyEclipse Struts Creation date: 04-17-2014
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/singleChoice" name="singleChoiceForm" parameter="flag"
 *                scope="request" validate="true"
 */
public class SingleChoiceAction extends DispatchAction {

	private QuestionService questionService;
	private SectionService sectionService;
	private SubjectService subjectService;

	public void setQuestionService(QuestionService questionService) {
		this.questionService = questionService;
	}

	public void setSectionService(SectionService sectionService) {
		this.sectionService = sectionService;
	}

	public void setSubjectService(SubjectService subjectService) {
		this.subjectService = subjectService;
	}

	/**
	 * 加载sectionList
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward loadSectionList(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		String subjectString = request.getParameter("subjectId");
		String questionTypeNameString=request.getParameter("questionTypeName");
		int subjectId = 0;
		if (subjectString != null)
			if (subjectString.length() > 0) {
				subjectId = Integer.parseInt(subjectString);
				request.getSession().setAttribute("subjectId", subjectId);
			}
		if(questionTypeNameString!=null)
			if(questionTypeNameString.length()>0&&!questionTypeNameString.equals("null"))
				request.setAttribute("questionTypeName", questionTypeNameString);
		
		List<Section> sections = sectionService.listSectionBySubject(subjectId);
		request.setAttribute("sections", sections);

		List<Subject> subjects = subjectService.getSubjects();
		List<Questiontype> questiontypes = questionService.showQuestiontypes();
		request.setAttribute("subjects", subjects);
		request.setAttribute("questionTypes", questiontypes);

		return mapping.findForward("showSingleChoiceList");
	}

	/**
	 * Method showSingleChoiceList 按章节显示单选题列表
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward showSingleChoiceList(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {
		// TODO Auto-generated method stub

		// 加载章节类型
		String sectionName = new String(request.getParameter("sectionName")
				.getBytes("ISO-8859-1"), "utf-8");

		String typeName = DefaultValue.SINGLE_CHOICE;

		request.getSession().setAttribute("typeName", typeName);
		String pageNowString = request.getParameter("pageNow");

		Section existSection = sectionService
				.getSectionBySectionName(sectionName);

		int subjectId = existSection.getSubject().getId();
		request.getSession().setAttribute("subjectId", subjectId);
		request.setAttribute("subjects", subjectService.getSubjects());

		// 加载问题类型
		List<Questiontype> questiontypes = questionService.showQuestiontypes();
		request.setAttribute("questionTypeName", typeName);
		request.setAttribute("questionTypes", questiontypes);

		// 加载章节下的页码

		List collection = questionService.listQuestionBySection(
				existSection.getId(), pageNowString, typeName);

		Map<String, Integer> pageMap = (Map<String, Integer>) collection.get(0);
		request.setAttribute("pageCount", pageMap.get("pageCount"));
		request.setAttribute("pageNow", pageMap.get("pageNow"));

		// 为jsp中的section设置值
		request.setAttribute("sectionName", sectionName);
		List<Section> sections = sectionService.listSectionBySubject(subjectId);
		request.setAttribute("sections", sections);

		// 设置题目
		request.setAttribute("singleChoices",
				(List<Singlechoice>) collection.get(1));

		return mapping.findForward((String) collection.get(2));
	}

	/**
	 * 显示单项选择详情
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward showSingleChoice(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		int singleChoiceId = Integer.parseInt(request
				.getParameter("singleChoiceId"));
		Singlechoice singlechoice = (Singlechoice) questionService.getQuestion(
				singleChoiceId, DefaultValue.SINGLE_CHOICE);
		request.setAttribute("singleChoice", singlechoice);

		// 获得subject下拉菜单里的所有subject
		request.setAttribute("subject", singlechoice.getSection().getSubject()
				.getSubName());
		// 获得下拉菜单里的所有section
		request.setAttribute("sectionName", singlechoice.getSection()
				.getSectionName());

		return mapping.findForward("showSingleChoice");
	}

	/**
	 * Method addQuestionUI 跳转到添加单选题的UI界面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward addSingleChoiceUI(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String pageNowString = request.getParameter("pageNow");
		if (pageNowString != null)
			if (pageNowString.length() > 0)
				request.setAttribute("pageNow", Integer.parseInt(pageNowString));

		int subjectId = (Integer) request.getSession()
				.getAttribute("subjectId");

		List<Section> sectionList = sectionService
				.listSectionBySubject(subjectId);
		List<Subject> subjectList = subjectService.getSubjects();
		request.setAttribute("subjects", subjectList);
		request.setAttribute("sections", sectionList);
		return mapping.findForward("addSingleChoice");
	}

	/**
	 * Method addQuestion 添加单选题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward addSingleChoice(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {

		SingleChoiceForm singleChoiceForm = (SingleChoiceForm) form;
		Singlechoice singlechoice = new Singlechoice();
		singlechoice.setQuestionStem(singleChoiceForm.getQuestionStem());
		singlechoice.setOptionA(singleChoiceForm.getOptionA());
		singlechoice.setOptionB(singleChoiceForm.getOptionB());
		singlechoice.setOptionC(singleChoiceForm.getOptionC());
		singlechoice.setOptionD(singleChoiceForm.getOptionD());
		singlechoice.setOptionE(singleChoiceForm.getOptionE());
		singlechoice.setAnswer(singleChoiceForm.getAnswer());
		singlechoice.setAnalysis(singleChoiceForm.getAnalysis());
		singlechoice.setRemark(singleChoiceForm.getRemark());

		if (singleChoiceForm.getSectionName() != null) {
			Section section = sectionService
					.getSectionBySectionName(singleChoiceForm.getSectionName());
			singlechoice.setSection(section);

			request.getSession().setAttribute("subjectId",
					section.getSubject().getId());

		} else {
			singlechoice.setSection(null);

		}
		questionService.addSingleChoice(singlechoice);

		// 设置subject下拉菜单
		request.setAttribute("subjects", subjectService.getSubjects());
		// 设置在section下拉列表
		request.setAttribute("sectionName", singlechoice.getSection()
				.getSectionName());
		List<Section> sections = sectionService
				.listSectionBySubject(singlechoice.getSection().getSubject()
						.getId());
		request.setAttribute("sections", sections);
		// 设置问题类型下拉菜单
		request.setAttribute("questionTypeName", DefaultValue.SINGLE_CHOICE);
		request.setAttribute("questionTypes",
				questionService.showQuestiontypes());
		// 设置题目及页码

		List collection = questionService.listQuestionBySection(singlechoice
				.getSection().getId(), null, DefaultValue.SINGLE_CHOICE);
		// 设置页码
		Map<String, Integer> pageMap = (Map<String, Integer>) collection.get(0);
		request.setAttribute("pageCount", pageMap.get("pageCount"));
		request.setAttribute("pageNow", pageMap.get("pageNow"));
		// 设置单项选择题
		request.setAttribute("singleChoices",
				(List<Singlechoice>) collection.get(1));
		return mapping.findForward("showSingleChoiceList");
	}

	/**
	 * 编辑单项选择题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward editSingleChoice(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		int singleChoiceId = Integer.parseInt(request
				.getParameter("singleChoiceId"));
		Singlechoice singlechoice = (Singlechoice) questionService.getQuestion(
				singleChoiceId, DefaultValue.SINGLE_CHOICE);
		request.setAttribute("singleChoice", singlechoice);

		String pageNowString = request.getParameter("pageNow");
		if (pageNowString != null)
			if (pageNowString.length() > 0)
				request.setAttribute("pageNow", Integer.parseInt(pageNowString));

		// 获得subject下拉菜单里的所有subject
		int subjectId = (Integer) request.getSession()
				.getAttribute("subjectId");
		List<Subject> subjectList = subjectService.getSubjects();
		if (subjectList != null) {
			request.setAttribute("subjects", subjectList);
		}

		// 获得下拉菜单里的所有section

		List<Section> sectionList = sectionService
				.listSectionBySubject(subjectId);
		if (sectionList != null) {
			request.setAttribute("sectionName", singlechoice.getSection()
					.getSectionName());
			request.setAttribute("sections", sectionList);
		}

		return mapping.findForward("editSingleChoice");
	}

	/**
	 * 保存单项选择题的修改
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward saveSingleChoice(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {
		// 设置返回页码
		String pageNowString = request.getParameter("pageNow");
		if (pageNowString != null)
			if (pageNowString.length() > 0)
				request.setAttribute("pageNow", pageNowString);
		// 存储更改过后的singleChoice
		SingleChoiceForm singleChoiceForm = (SingleChoiceForm) form;
		int singleChoiceId = Integer.parseInt(request
				.getParameter("singleChoiceId"));

		Singlechoice singlechoice = (Singlechoice) questionService.getQuestion(
				singleChoiceId, DefaultValue.SINGLE_CHOICE);

		singlechoice.setQuestionStem(singleChoiceForm.getQuestionStem());
		singlechoice.setOptionA(singleChoiceForm.getOptionA());
		singlechoice.setOptionB(singleChoiceForm.getOptionB());
		singlechoice.setOptionC(singleChoiceForm.getOptionC());
		singlechoice.setOptionD(singleChoiceForm.getOptionD());
		singlechoice.setOptionE(singleChoiceForm.getOptionE());
		singlechoice.setAnswer(singleChoiceForm.getAnswer());
		singlechoice.setAnalysis(singleChoiceForm.getAnalysis());
		singlechoice.setRemark(singleChoiceForm.getRemark());

		if (singleChoiceForm.getSectionName() != null) {
			Section section = sectionService
					.getSectionBySectionName(singleChoiceForm.getSectionName());
			singlechoice.setSection(section);
		}

		questionService.updateSingleChoice(singlechoice);
		// 获得subject下拉菜单里的所有subject
		int subjectId = (Integer) request.getSession()
				.getAttribute("subjectId");
		List<Subject> subjectList = subjectService.getSubjects();
		if (subjectList != null) {
			request.setAttribute("subjects", subjectList);
		}
		// 设置section下拉菜单
		request.setAttribute("sectionName", singlechoice.getSection()
				.getSectionName());
		List<Section> sections = sectionService.listSectionBySubject(subjectId);
		request.setAttribute("sections", sections);
		// 设置科目列表
		request.setAttribute("subjects", subjectService.getSubjects());
		// 设置题型
		request.setAttribute("questionTypeName", DefaultValue.SINGLE_CHOICE);
		request.setAttribute("questionTypes",
				questionService.showQuestiontypes());
		// 设置题目及页码
		List collection = questionService.listQuestionBySection(singlechoice
				.getSection().getId(), pageNowString,
				DefaultValue.SINGLE_CHOICE);
		// 设置页码
		Map<String, Integer> pageMap = (Map<String, Integer>) collection.get(0);
		request.setAttribute("pageCount", pageMap.get("pageCount"));
		request.setAttribute("pageNow", pageMap.get("pageNow"));
		// 设置单项选择题
		request.setAttribute("singleChoices",
				(List<Singlechoice>) collection.get(1));
		return mapping.findForward("showSingleChoiceList");
	}

	/**
	 * 删除单选题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward deleteSingleChoice(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {
		int singleChoiceId = Integer.parseInt(request
				.getParameter("singleChoiceId"));
		Singlechoice singlechoice = (Singlechoice) questionService.getQuestion(
				singleChoiceId, DefaultValue.SINGLE_CHOICE);
		// 设置section下拉框
		request.setAttribute("sectionName", singlechoice.getSection()
				.getSectionName());
		request.setAttribute(
				"sections",
				sectionService.listSectionBySubject(singlechoice.getSection()
						.getSubject().getId()));
		// 设置subject下拉框
		request.setAttribute("subjects", subjectService.getSubjects());
		// 设置questionType下拉框
		request.setAttribute("questionTypeName", DefaultValue.SINGLE_CHOICE);
		request.setAttribute("questionTypes",
				questionService.showQuestiontypes());

		// 删除该选择题
		questionService
				.deleteQuestion(DefaultValue.SINGLE_CHOICE, singlechoice);

		// 设置页码及问题
		String pageNowString = request.getParameter("pageNow");
		List collection = questionService.listQuestionBySection(singlechoice
				.getSection().getId(), pageNowString,
				DefaultValue.SINGLE_CHOICE);
		// 设置页码
		Map<String, Integer> pageMap = (Map<String, Integer>) collection.get(0);
		request.setAttribute("pageCount", pageMap.get("pageCount"));
		request.setAttribute("pageNow", pageMap.get("pageNow"));
		// 设置单项选择题
		request.setAttribute("singleChoices",
				(List<Singlechoice>) collection.get(1));

		return mapping.findForward("showSingleChoiceList");

	}
}