/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.yrw.web.actions;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.yrw.config.DefaultValue;
import com.yrw.domains.Questiontype;
import com.yrw.domains.Section;
import com.yrw.domains.Singlechoice;
import com.yrw.domains.Subject;
import com.yrw.domains.Trueorfalse;
import com.yrw.service.QuestionService;
import com.yrw.service.SectionService;
import com.yrw.service.SubjectService;
import com.yrw.web.forms.SingleChoiceForm;
import com.yrw.web.forms.TrueOrFalseForm;

/**
 * MyEclipse Struts Creation date: 04-17-2014
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class TrueOrFalseAction extends DispatchAction {
	private QuestionService questionService;
	private SectionService sectionService;
	private SubjectService subjectService;

	public void setQuestionService(QuestionService questionService) {
		this.questionService = questionService;
	}

	public void setSectionService(SectionService sectionService) {
		this.sectionService = sectionService;
	}

	public void setSubjectService(SubjectService subjectService) {
		this.subjectService = subjectService;
	}

	/**
	 * Method showTrueOrFalseList 按章节显示判断题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward showTrueOrFalseList(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {
		// TODO Auto-generated method stub

		// 加载章节类型
		String sectionName;

		if (request.getAttribute("source") != null)
			sectionName = (String) request.getAttribute("sectionName");
		else
			sectionName = new String(request.getParameter("sectionName")
					.getBytes("ISO-8859-1"), "utf-8");
		String typeName = DefaultValue.TRUE_OR_FALSE;
		String pageNowString = request.getParameter("pageNow");
		int subjectId = (Integer) request.getSession()
				.getAttribute("subjectId");

		// 加载问题类型
		List<Questiontype> questiontypes = questionService
				.showQuestiontypes(typeName);
		request.setAttribute("questionType", questiontypes.get(0));
		questiontypes.remove(0);
		request.setAttribute("questionTypes", questiontypes);

		// 加载章节下的题目
		Section existSection = sectionService
				.getSectionBySectionName(sectionName);
		List collection = questionService.listQuestionBySection(
				existSection.getId(), pageNowString, typeName);

		Map<String, Integer> pageMap = (Map<String, Integer>) collection.get(0);
		request.setAttribute("pageCount", pageMap.get("pageCount"));
		request.setAttribute("pageNow", pageMap.get("pageNow"));
		// 为jsp中的hidden设置值
		request.setAttribute("sectionName", sectionName);
		// 设置问题
		request.setAttribute("trueOrFalses", (List) collection.get(1));

		return mapping.findForward((String) collection.get(2));
	}

	/**
	 * 显示判断题详情
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward showTrueOrFalse(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		int singleChoiceId = Integer.parseInt(request
				.getParameter("trueOrFalseId"));
		String isEdit = request.getParameter("edit");
		Trueorfalse trueorfalse = (Trueorfalse) questionService.getQuestion(
				singleChoiceId, DefaultValue.TRUE_OR_FALSE);
		request.setAttribute("trueOrFalse", trueorfalse);

		// 获得subject下拉菜单里的所有subject
		int subjectId = (Integer) request.getSession()
				.getAttribute("subjectId");
		List<Subject> subjectList = subjectService.getSubjectList(subjectId);
		if (subjectList != null) {
			request.setAttribute("subject", subjectList.get(0));
			subjectList.remove(0);
			request.setAttribute("subjects", subjectList);
		} else
			request.setAttribute("subject", "暂无所属科目");

		// 获得下拉菜单里的所有section

		List<Section> sectionList = sectionService.listSectionBySubIdAndSecId(
				subjectId, trueorfalse.getSection().getId());

		if (sectionList != null) {

			request.setAttribute("section", sectionList.get(0));
			sectionList.remove(0);
			request.setAttribute("sections", sectionList);
		} else
			request.setAttribute("section", "暂无所属科目");
		if (isEdit != null) {
			return mapping.findForward("editTrueOrFalse");
		} else
			return mapping.findForward("showTrueOrFalse");
	}

	/**
	 * Method 跳转到添加判断题的UI界面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward addTrueOrFalseUI(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		int subjectId = (Integer) request.getSession()
				.getAttribute("subjectId");

		List<Section> sectionList = sectionService.listSection(subjectId);
		List<Subject> subjectList = subjectService.getSubjects();
		request.setAttribute("subjects", subjectList);
		request.setAttribute("sections", sectionList);
		return mapping.findForward("addTrueOrFalse");
	}

	/**
	 * Method 添加判断题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward addTrueOrFalse(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws UnsupportedEncodingException {

		TrueOrFalseForm trueOrFalseForm = (TrueOrFalseForm) form;
		Trueorfalse trueorfalse = new Trueorfalse();
		trueorfalse.setQuestionStem(trueOrFalseForm.getQuestionStem());
		System.out.println(Boolean.parseBoolean(trueOrFalseForm.getAnswerR()));
		System.out.println(Boolean.parseBoolean(trueOrFalseForm.getAnswerW()));
		if (Boolean.parseBoolean(trueOrFalseForm.getAnswerR())
				&& !Boolean.parseBoolean(trueOrFalseForm.getAnswerW()))
			trueorfalse.setAnswer(true);
		else
			trueorfalse.setAnswer(false);
		trueorfalse.setAnalysis(trueOrFalseForm.getAnalysis());
		trueorfalse.setRemark(trueOrFalseForm.getRemark());

		if (trueOrFalseForm.getSectionName() != null) {
			Section section = sectionService
					.getSectionBySectionName(trueOrFalseForm.getSectionName());
			trueorfalse.setSection(section);
		} else {
			trueorfalse.setSection(null);

		}
		questionService.addTrueOrFalse(trueorfalse);
		// 设置在showTrueOrFalseList中要使用参数
		request.setAttribute("sectionName", trueorfalse.getSection()
				.getSectionName());

		request.setAttribute("source", "addTrueOrFalse");
		return showTrueOrFalseList(mapping, null, request, response);
	}

	/**
	 * 修该判断题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */

	public ActionForward editTrueOrFalse(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {
		TrueOrFalseForm trueOrFalseForm = (TrueOrFalseForm) form;
		int trueOrFalseId = Integer.parseInt(request
				.getParameter("trueOrFalseId"));

		Trueorfalse trueorfalse = (Trueorfalse) questionService.getQuestion(
				trueOrFalseId, DefaultValue.TRUE_OR_FALSE);

		trueorfalse.setQuestionStem(trueOrFalseForm.getQuestionStem());
		if (Boolean.parseBoolean(trueOrFalseForm.getAnswerR())
				&& !Boolean.parseBoolean(trueOrFalseForm.getAnswerW()))
			trueorfalse.setAnswer(true);
		else
			trueorfalse.setAnswer(false);
		trueorfalse.setAnalysis(trueOrFalseForm.getAnalysis());
		trueorfalse.setRemark(trueOrFalseForm.getRemark());

		if (trueOrFalseForm.getSectionName() != null) {
			Section section = sectionService
					.getSectionBySectionName(trueOrFalseForm.getSectionName());
			trueorfalse.setSection(section);
		}

		questionService.updateTrueOrFalse(trueorfalse);
		request.setAttribute("trueOrFalseId", trueOrFalseId);
		return showTrueOrFalse(mapping, null, request, response);
	}

	/**
	 * 删除判断题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward deleteTrueOrFalse(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {
		int trueOrFalseId = Integer.parseInt(request
				.getParameter("trueOrFalseId"));
		Trueorfalse trueorfalse = (Trueorfalse) questionService.getQuestion(
				trueOrFalseId, DefaultValue.TRUE_OR_FALSE);

		if (trueorfalse != null) {
			request.setAttribute("sectionName", trueorfalse.getSection()
					.getSectionName());
			questionService.deleteQuestion(DefaultValue.TRUE_OR_FALSE,
					trueorfalse);
		}
		// 为showTrueOrFList设置参数
		request.setAttribute("source", "deleteTrueOrFalse");

		return showTrueOrFalseList(mapping, null, request, response);

	}
}