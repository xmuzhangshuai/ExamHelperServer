/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.yrw.web.actions;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.yrw.config.DefaultValue;
import com.yrw.domains.Questiontype;
import com.yrw.domains.Section;
import com.yrw.domains.Singlechoice;
import com.yrw.domains.Subject;
import com.yrw.service.QuestionService;
import com.yrw.service.SectionService;
import com.yrw.service.SubjectService;
import com.yrw.web.forms.SingleChoiceForm;

/**
 * 
 * 项目名称：ExamHelper 类名称：QuestionAction 类描述： 跟题目操作有关的action 创建人：叶睿雯 创建时间：2014-3-17
 * 修改人： 修改时间： 修改备注：
 * 
 * @version
 * 
 */
public class QuestionAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	QuestionService questionService;
	private SubjectService subjectService;
	private SectionService sectionService;

	public void setSectionService(SectionService sectionService) {
		this.sectionService = sectionService;
	}

	public void setSubjectService(SubjectService subjectService) {
		this.subjectService = subjectService;
	}

	public void setQuestionService(QuestionService questionService) {
		this.questionService = questionService;
	}

	// /**
	// * Method showQuestionByType 按题目类型显示题目
	// *
	// * @param mapping
	// * @param form
	// * @param request
	// * @param response
	// * @return ActionForward
	// * @throws UnsupportedEncodingException
	// */
	// public ActionForward showQuestionByType(ActionMapping mapping,
	// ActionForm form, HttpServletRequest request,
	// HttpServletResponse response) throws UnsupportedEncodingException {
	// // TODO Auto-generated method stub
	//
	// String typeName = new String(request.getParameter("typeName").getBytes(
	// "ISO-8859-1"), "utf-8");
	//
	// String pageNowString = request.getParameter("pageNow");
	//
	// int subjectId = (Integer) request.getSession()
	// .getAttribute("subjectId");
	// List collection = questionService.listQuestionByType(typeName,
	// pageNowString, subjectId);
	//
	// Map<String, Integer> map = (Map<String, Integer>) collection.get(0);
	// request.setAttribute("pageCount", map.get("pageCount"));
	// request.setAttribute("pageNow", map.get("pageNow"));
	//
	// if (typeName.equals(DefaultValue.SINGLE_CHOICE))
	//
	// request.setAttribute("singleChoice", (List) collection.get(1));
	// else if (typeName.equals(DefaultValue.MULTI_CHOICE))
	//
	// request.setAttribute("multiChoices", (List) collection.get(1));
	// else if (typeName.equals(DefaultValue.TRUE_OR_FALSE))
	//
	// request.setAttribute("trueOrFalse", (List) collection.get(1));
	// else if (typeName.equals(DefaultValue.MATERIAL_ANALYSIS))
	// request.setAttribute("materialAnalysis", (List) collection.get(1));
	//
	// return mapping.findForward((String) collection.get(2));
	// }

	/**
	 * Method showQuestionBySection 按题目章节
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward showQuestionBySection(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {
		// TODO Auto-generated method stub
		// 加载问题类型
		List<Questiontype> questiontypes = questionService.showQuestiontypes();
		request.setAttribute("questionTypes", questiontypes);

		//
		String sectionName = new String(request.getParameter("sectionName").getBytes(
				"ISO-8859-1"), "utf-8");
		String typeName = new String(request.getParameter("typeName").getBytes(
				"ISO-8859-1"), "utf-8");
		request.getSession().setAttribute("typeName", typeName);
		String pageNowString = request.getParameter("pageNow");
		System.out.println("QuestionAction:showQUestionBYSection" + sectionName
				+ " " + typeName);
		int subjectId = (Integer) request.getSession()
				.getAttribute("subjectId");
		
		// 加载章节下的题目
		Section existSection=sectionService.getSectionBySectionName(sectionName);
		List collection = questionService.listQuestionBySection(existSection.getId(),
				pageNowString, typeName);

		Map<String, Integer> pageMap = (Map<String, Integer>) collection.get(0);
		request.setAttribute("pageCount", pageMap.get("pageCount"));
		request.setAttribute("pageNow", pageMap.get("pageNow"));

		if (typeName.equals(DefaultValue.SINGLE_CHOICE))

			request.setAttribute("singleChoices", (List) collection.get(1));
		else if (typeName.equals(DefaultValue.MULTI_CHOICE))

			request.setAttribute("multiChoices", (List) collection.get(1));
		else if (typeName.equals(DefaultValue.TRUE_OR_FALSE))

			request.setAttribute("trueOrFalses", (List) collection.get(1));
		else if (typeName.equals(DefaultValue.MATERIAL_ANALYSIS))
			request.setAttribute("materialAnalysises", (List) collection.get(1));

		return mapping.findForward((String) collection.get(2));
	}

	/**
	 * Method deleteQuestion 删除问题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward deleteQuestion(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws UnsupportedEncodingException {

		int id = Integer.parseInt(request.getParameter("id"));
		String typeName = new String(request.getParameter("typeName").getBytes(
				"ISO-8859-1"), "utf-8");

		questionService.deleteQuestion(typeName, id);
		return showQuestionBySection(mapping, form, request, response);
	}

	/**
	 * 显示单项选择详情
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward showSingleChoice(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		int singleChoiceId = Integer.parseInt(request
				.getParameter("singleChoiceId"));
		String isEdit = request.getParameter("edit");
		Singlechoice singlechoice = (Singlechoice) questionService
				.showQuestion(singleChoiceId, DefaultValue.SINGLE_CHOICE);
		request.setAttribute("singleChoice", singlechoice);

		// 获得subject下拉菜单里的所有subject
		int subjectId = (Integer) request.getSession()
				.getAttribute("subjectId");
		List<Subject> subjectList = subjectService.getSubjectList(subjectId);
		if (subjectList != null) {
			request.setAttribute("subject", subjectList.get(0));
			subjectList.remove(0);
			request.setAttribute("subjects", subjectList);
		} else
			request.setAttribute("subject", "暂无所属科目");

		// 获得下拉菜单里的所有section

		List<Section> sectionList = sectionService.listSectionBySubIdAndSecId(
				subjectId, singlechoice.getSection().getId());

		if (sectionList != null) {
			request.setAttribute("section", sectionList.get(0));
			sectionList.remove(0);
			request.setAttribute("sections", sectionList);
		} else
			request.setAttribute("section", "暂无所属科目");
		if (isEdit.equals("true"))
			return mapping.findForward("edtiSingleChoice");
		else
			return mapping.findForward("showSingleChoiceDetail");
	}

	/**
	 * Method addQuestionUI 跳转到添加单选题的UI界面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward addSingleChoiceUI(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		int subjectId = (Integer) request.getSession()
				.getAttribute("subjectId");
		System.out.println("QuestionAction addSingleChoiceUi " + subjectId);
		List<Section> sectionList = sectionService.listSection(subjectId);
		List<Subject> subjectList = subjectService.getSubjects();
		request.setAttribute("subjects", subjectList);
		request.setAttribute("sections", sectionList);
		return mapping.findForward("addSingleChoice");
	}

	/**
	 * Method addQuestion 添加单选题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward addSingleChoice(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {

		SingleChoiceForm singleChoiceForm = (SingleChoiceForm) form;
		Singlechoice singlechoice = new Singlechoice();
		singlechoice.setQuestionStem(singleChoiceForm.getQuestionStem());
		singlechoice.setOptionA(singleChoiceForm.getOptionA());
		singlechoice.setOptionB(singleChoiceForm.getOptionB());
		singlechoice.setOptionC(singleChoiceForm.getOptionC());
		singlechoice.setOptionD(singleChoiceForm.getOptionD());
		singlechoice.setOptionE(singleChoiceForm.getOptionE());
		singlechoice.setAnswer(singleChoiceForm.getAnswer());
		singlechoice.setAnalysis(singleChoiceForm.getAnalysis());

		if (singleChoiceForm.getSectionName() != null) {
			Section section = sectionService
					.getSectionBySectionName(singleChoiceForm.getSectionName());
			singlechoice.setSection(section);
		} else {
			singlechoice.setSection(null);

		}

		questionService.addSingleChoice(singlechoice);
		//设置在showQuestioBySection中要使用参数
		request.setAttribute("sectionName", singlechoice.getSection().getSectionName());
		request.setAttribute("typeName", "单项选择题");

		return showQuestionBySection(mapping, null, request, response);
	}

	/**
	 * 修该单项选择题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward editSingleChoice(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {
		SingleChoiceForm singleChoiceForm = (SingleChoiceForm) form;
		int singleChoiceId = Integer.parseInt(request
				.getParameter("singleChoiceId"));

		Singlechoice singlechoice = (Singlechoice) questionService.getQuestion(
				singleChoiceId, "单项选择题");

		singlechoice.setQuestionStem(singleChoiceForm.getQuestionStem());
		singlechoice.setOptionA(singleChoiceForm.getOptionA());
		singlechoice.setOptionB(singleChoiceForm.getOptionB());
		singlechoice.setOptionC(singleChoiceForm.getOptionC());
		singlechoice.setOptionD(singleChoiceForm.getOptionD());
		singlechoice.setOptionE(singleChoiceForm.getOptionE());
		singlechoice.setAnswer(singleChoiceForm.getAnswer());
		singlechoice.setAnalysis(singleChoiceForm.getAnalysis());

		System.out.println("QuestionAction editSingleChoice  "
				+ singleChoiceForm.getSectionName()
				+ singleChoiceForm.getSubjectName());
		if (singleChoiceForm.getSectionName() != null) {
			Section section = sectionService
					.getSectionBySectionName(singleChoiceForm.getSectionName());
			singlechoice.setSection(section);
		}

		questionService.updateSingleChoice(singlechoice);
		request.setAttribute("singleChoiceId", singleChoiceId);
		return showSingleChoice(mapping, singleChoiceForm, request, response);
	}
}