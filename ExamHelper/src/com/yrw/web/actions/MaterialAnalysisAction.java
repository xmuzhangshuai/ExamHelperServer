/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.yrw.web.actions;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.yrw.config.DefaultValue;
import com.yrw.domains.Materialanalysis;
import com.yrw.domains.Questionsofmaterial;
import com.yrw.domains.Questiontype;
import com.yrw.domains.Section;
import com.yrw.domains.Singlechoice;
import com.yrw.domains.Subject;
import com.yrw.service.QuestionService;
import com.yrw.service.SectionService;
import com.yrw.service.SubjectService;
import com.yrw.web.forms.MaterialAnalysisForm;
import com.yrw.web.forms.SingleChoiceForm;

/**
 * MyEclipse Struts Creation date: 04-17-2014
 * 
 * XDoclet definition:
 * 
 * @struts.action
 */
public class MaterialAnalysisAction extends DispatchAction {
	private QuestionService questionService;
	private SectionService sectionService;
	private SubjectService subjectService;

	public void setQuestionService(QuestionService questionService) {
		this.questionService = questionService;
	}

	public void setSectionService(SectionService sectionService) {
		this.sectionService = sectionService;
	}

	public void setSubjectService(SubjectService subjectService) {
		this.subjectService = subjectService;
	}

	/**
	 * 材料分析题列表
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward showMaterialAnalysisList(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {
		// TODO Auto-generated method stub

		
		String	sectionName = new String(request.getParameter("sectionName")
					.getBytes("ISO-8859-1"), "utf-8");
		String typeName = DefaultValue.MATERIAL_ANALYSIS;

		request.getSession().setAttribute("typeName", typeName);
		String pageNowString = request.getParameter("pageNow");

		int subjectId = (Integer) request.getSession()
				.getAttribute("subjectId");

		// 加载问题类型
		List<Questiontype> questiontypes = questionService
				.showQuestiontypes(typeName);
		request.setAttribute("questionType", questiontypes.get(0));
		questiontypes.remove(0);
		request.setAttribute("questionTypes", questiontypes);

		// 加载章节下的题目
		Section existSection = sectionService
				.getSectionBySectionName(sectionName);
		List collection = questionService.listQuestionBySection(
				existSection.getId(), pageNowString, typeName);

		Map<String, Integer> pageMap = (Map<String, Integer>) collection.get(0);
		request.setAttribute("pageCount", pageMap.get("pageCount"));
		request.setAttribute("pageNow", pageMap.get("pageNow"));
		// 为jsp中的hidden设置值
		request.setAttribute("sectionName", sectionName);
		// 设置多选题问题
		request.setAttribute("materialAnalysises", (List) collection.get(1));

		return mapping.findForward((String) collection.get(2));
	}

	/**
	 * 显示多选题详情
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward showMaterialAnalysis(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		int materialAnalysisId;
		if (request.getAttribute("source") != null)
			materialAnalysisId = (Integer) request
					.getAttribute("materialAnalysisId");
		else
			materialAnalysisId = Integer.parseInt(request
					.getParameter("materialAnalysisId"));

		String isEdit = request.getParameter("edit");
		// 设置材料分析题
		Materialanalysis materialanalysis = (Materialanalysis) questionService
				.getQuestion(materialAnalysisId, DefaultValue.MATERIAL_ANALYSIS);
		
		request.setAttribute("materialAnalysis", materialanalysis);
		// 设置分析题下的小题
		List<Questionsofmaterial> questionsofmaterials = new ArrayList<Questionsofmaterial>(
				materialanalysis.getQuestionsofmaterials());
		request.setAttribute("questionOfMaterials", questionsofmaterials);

		// 获得subject下拉菜单里的所有subject
		int subjectId = (Integer) request.getSession()
				.getAttribute("subjectId");
		List<Subject> subjectList = subjectService.getSubjectList(subjectId);
		if (subjectList != null) {
			request.setAttribute("subject", subjectList.get(0));
			subjectList.remove(0);
			request.setAttribute("subjects", subjectList);
		} else
			request.setAttribute("subject", "暂无所属科目");

		// 获得下拉菜单里的所有section

		List<Section> sectionList = sectionService.listSectionBySubIdAndSecId(
				subjectId, materialanalysis.getSection().getId());

		if (sectionList != null) {

			request.setAttribute("section", sectionList.get(0));
			sectionList.remove(0);
			request.setAttribute("sections", sectionList);
		} else
			request.setAttribute("section", "暂无所属科目");
		if (isEdit != null) {
			return mapping.findForward("editMaterialAnalysis");
		} else
			return mapping.findForward("showMaterialAnalysis");
	}

	/**
	 * 添加材料分析题小题的页面跳转
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward addQuestionOfMaterialUI(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		int materialAnalysisId = Integer.parseInt(request
				.getParameter("materialAnalysisId"));
		int questionNumber = questionService
				.getMaxQuestionNumByMaterialId(materialAnalysisId);
		if (questionNumber != 0)
			request.setAttribute("questionNumber", questionNumber + 1);
		else
			request.setAttribute("quesitonNumber", 1);
		request.setAttribute("materialAnalysisId", materialAnalysisId);
		return mapping.findForward("addQuestionOfMaterial");
	}

	/**
	 * 添加材料分析题小题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */

	public ActionForward addQuestionOfMaterial(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {

		int materialAnalysisId = Integer.parseInt(request
				.getParameter("materialAnalysisId"));
		Questionsofmaterial questionsofmaterial = new Questionsofmaterial();

		// 加载QuestionOfMaterialAnalysis中的属性
		questionsofmaterial.setAnalysis(request.getParameter("analysis"));
		questionsofmaterial.setAnswer(request.getParameter("answer"));
		questionsofmaterial.setQuestionNumber(Integer.parseInt(request
				.getParameter("questionNumber")));
		questionsofmaterial.setQuestionStem(request
				.getParameter("questionStem"));
		questionsofmaterial.setScore(Integer.parseInt(request
				.getParameter("score")));

		// 持久化questionOfMaterialAnalysis对象
		questionService.addQuestionofMaterial(materialAnalysisId,
				questionsofmaterial);
		// 设置在showMaterialAnalysis中要使用参数
		request.setAttribute("materialAnalysisId", materialAnalysisId);
		request.setAttribute("source", "addQuestionOfMaterial");
		return showMaterialAnalysis(mapping, null, request, response);
	}

	/**
	 * 修该材料题小题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */

	public ActionForward editQuestionOfMaterial(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		int questionOfMaterialId = Integer.parseInt(request
				.getParameter("questionOfMaterialId"));

		// 获取QuestionOfMaterial对象
		Questionsofmaterial questionsofmaterial = (Questionsofmaterial) questionService
				.getQuestion(questionOfMaterialId,
						DefaultValue.QUESTION_OF_MATERIAL);

		// 更新QuesitonOfMaterial对象数据
		questionsofmaterial.setAnalysis(request.getParameter("analysis"));
		questionsofmaterial.setAnswer(request.getParameter("answer"));
		questionsofmaterial.setQuestionStem(request
				.getParameter("questionStem"));
		questionsofmaterial.setScore(Integer.parseInt(request
				.getParameter("score")));

		// 持久化materialAnalysi对象
		questionService.updateQuestionofMaterial(questionsofmaterial);
		// 设置转到showMaterialAnalysis中要使用参数
		request.setAttribute("materialAnalysisId", questionsofmaterial
				.getMaterialanalysis().getId());
		request.setAttribute("source", "editQuestionOfMaterial");
		return showMaterialAnalysis(mapping, null, request, response);
	}

	/**
	 * 删除材料题下的小题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward deleteQuestionOfMaterial(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {

		int questionOfMaterialId = Integer.parseInt(request
				.getParameter("questionOfMaterialId"));

		Questionsofmaterial questionsofmaterial = (Questionsofmaterial) questionService
				.getQuestion(questionOfMaterialId,
						DefaultValue.QUESTION_OF_MATERIAL);
		Materialanalysis materialanalysis = questionsofmaterial
				.getMaterialanalysis();
		questionService.deleteQuestion(DefaultValue.QUESTION_OF_MATERIAL,
				questionsofmaterial);
		// 修改剩余小题的小题编号
		questionService.updateQuestionNumber(
				questionsofmaterial.getQuestionNumber(), materialanalysis);
		// 设置跳转到showMaterialAnalysis的参数
		request.setAttribute("materialAnalysisId", materialanalysis.getId());
		request.setAttribute("source", "deleteQuestionOfMaterial");
		return showMaterialAnalysis(mapping, form, request, response);

	}

	/**
	 * 移动小题位置
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward moveQuestionOfMaterial(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		int questionOfMaterialId = Integer.parseInt(request
				.getParameter("questionOfMaterialId"));
		String type = request.getParameter("type");
		Questionsofmaterial questionsofmaterial = (Questionsofmaterial) questionService
				.getQuestion(questionOfMaterialId,
						DefaultValue.QUESTION_OF_MATERIAL);
		if (type.equals("decrease"))
			questionService.decreaseQuestionNumber(questionsofmaterial);
		else {
			questionService.increaseQuestionNumber(questionsofmaterial);
		}

		// 设置跳转到showMaterialAnalysis的参数
		request.setAttribute("materialAnalysisId", questionsofmaterial
				.getMaterialanalysis().getId());
		request.setAttribute("source", "moveQuestionOfMaterial");
		return showMaterialAnalysis(mapping, form, request, response);

	}

	/**
	 * 添加材料分析题的页面跳转
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward addMaterialAnalysisUI(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		int subjectId = (Integer) request.getSession()
				.getAttribute("subjectId");

		List<Section> sectionList = sectionService.listSection(subjectId);
		List<Subject> subjectList = subjectService.getSubjects();
		request.setAttribute("subjects", subjectList);
		request.setAttribute("sections", sectionList);
		return mapping.findForward("addMaterialAnalysis");
	}

	/**
	 * 添加材料分析题大题
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */

	public ActionForward addMaterialAnalysis(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {

		MaterialAnalysisForm materialAnalysisForm = (MaterialAnalysisForm) form;
		Materialanalysis materialanalysis = new Materialanalysis();
		// 加载materialAnalysis中的属性
		materialanalysis.setMaterial(materialAnalysisForm.getMaterial());
		//materialanalysis.setMaterialImage(materialAnalysisForm
			//	.getMaterialImage());
		materialanalysis.setRemark(materialAnalysisForm.getRemark());
		materialanalysis.setQuestionsofmaterials(null);

		if (materialAnalysisForm.getSectionName() != null) {
			Section section = sectionService
					.getSectionBySectionName(materialAnalysisForm
							.getSectionName());
			materialanalysis.setSection(section);
		} else {
			materialanalysis.setSection(null);

		}
		// 持久化materialAnalysis对象,并获得返回的Id
		int materialAnalysisId = questionService
				.addMaterialAnalysis(materialanalysis); //
		// 设置在showMaterialAnalysis中要使用参数
		request.setAttribute("materialAnalysisId", materialAnalysisId);
		request.setAttribute("source", "addMaterialAnalysis");
		return showMaterialAnalysis(mapping, null, request, response);
	}

	/**
	 * 修该材料题大题题干
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */

	public ActionForward editMaterialAnalysis(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		MaterialAnalysisForm materialAnalysisForm = (MaterialAnalysisForm) form;
		int materialAnalysisId = Integer.parseInt(request
				.getParameter("materialAnalysisId"));

		Materialanalysis materialanalysis = (Materialanalysis) questionService
				.getQuestion(materialAnalysisId, DefaultValue.MATERIAL_ANALYSIS);

		// 更新material对象数据
		materialanalysis.setMaterial(materialAnalysisForm.getMaterial());
	//	materialanalysis.setMaterialImage(materialAnalysisForm
			//	.getMaterialImage());
		materialanalysis.setRemark(materialAnalysisForm.getRemark());

		if (materialAnalysisForm.getSectionName() != null) {
			Section section = sectionService
					.getSectionBySectionName(materialAnalysisForm
							.getSectionName());
			materialanalysis.setSection(section);
		}
		// 持久化materialAnalysi对象
		questionService.updateMaterialAnalysis(materialanalysis);
		// 设置转到showMaterialAnalysis中要使用参数
		request.setAttribute("materialAnalysisId", materialanalysis.getId());
		request.setAttribute("source", "editMaterialAnalysis");
		return showMaterialAnalysis(mapping, null, request, response);
	}

	/**
	 * 删除材料题（包含材料题下的小题）
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	public ActionForward deleteMaterialAnalysis(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws UnsupportedEncodingException {
		int materialAnalysisId = Integer.parseInt(request
				.getParameter("materialAnalysisId"));
		Materialanalysis materialanalysis = (Materialanalysis) questionService
				.getQuestion(materialAnalysisId, DefaultValue.MATERIAL_ANALYSIS);
		// 设置跳转到showMaterialAnalysislist的参数
		request.setAttribute("sectionName", materialanalysis.getSection()
				.getSectionName());
		request.setAttribute("source", "deleteMaterialAnalysis");
		questionService.deleteQuestion(DefaultValue.MATERIAL_ANALYSIS,
				materialanalysis);

		return showMaterialAnalysisList(mapping, null, request, response);

	}
}